import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens
import org.eclipse.jgit.api.Git
import org.eclipse.jgit.internal.storage.file.FileRepository
import java.util.stream.StreamSupport

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.eclipse.jgit:org.eclipse.jgit:5.10.0.202012080955-r'
    }
}

plugins {
    id 'idea'
}

idea.module {
    excludeDirs += file('out')
    resourceDirs += file('template')
    excludeDirs += file('template/aar')
    resourceDirs += file('scripts')
    resourceDirs += file('docs')
}

ext {
    riruMinSdkVersion = 23
    riruTargetSdkVersion = 32
    riruBuildToolsVersion = "32.0.0"

    riruApiVersion = 26
    riruMinApiVersion = 24

    repo = new FileRepository(rootProject.file(".git"))
    gitObjectId = repo.refDatabase.exactRef("refs/remotes/origin/master").objectId
    gitCommitId = gitObjectId.abbreviate(10).name()
    gitCommitCount = StreamSupport.stream(new Git(repo).log().add(gitObjectId).call().spliterator(), false).count()

    def versionNameMinor = 1
    def versionNamePatch = 6

    riruVersionNameShort = "v${riruApiVersion}.${versionNameMinor}.${versionNamePatch}"
    riruVersionName = "${riruVersionNameShort}.r${gitCommitCount}.${gitCommitId}"
    riruVersionCode = gitCommitCount

    outDir = file("$rootDir/out")

    riruPath  = "/riru"
}

task clean(type: Delete) {
    delete rootProject.buildDir, outDir
}

["Release", "Debug"].forEach { variant ->
    def zipName = "riru-${riruVersionName}-${variant}.zip"
    def flashDir = file("$outDir/riru-${riruVersionName}-${variant}")

    task("prepareUpdateFiles${variant}") {
        dependsOn("clean")
        dependsOn(":rirud:assemble$variant")
        dependsOn(":riru:assemble$variant")

        doLast {
            def templatePath = "$rootDir/template/update_package"
            copy {
                into flashDir
                from(templatePath) {
                    exclude 'update.sh', 'files/rirud_launcher.rc'
                }
                from(templatePath) {
                    include 'update.sh', 'files/rirud_launcher.rc'
                    filter(ReplaceTokens.class, tokens: [
                            "RIRU_PATH": riruPath.toString()
                    ])
                    filter(FixCrLfFilter.class,
                            eol: FixCrLfFilter.CrLf.newInstance("lf"))
                }
                from(project(":riru").buildDir.absolutePath + "/intermediates/stripped_native_libs/${variant.toLowerCase()}/out/lib") {
                    into 'files/lib'
                }
                from(project(":rirud").buildDir.absolutePath + "/outputs/apk/${variant.toLowerCase()}/rirud.apk") {
                    include 'rirud.apk'
                    into 'files/'
                }
            }
        }
    }

    task("zip${variant}", type: Zip) {
        dependsOn("prepareUpdateFiles${variant}")
        doLast {
            from flashDir
            archiveName zipName
            destinationDir outDir
        }
    }

    task("push${variant}", type: Exec) {
        dependsOn("zip${variant}")
        doLast {
            workingDir outDir
            commandLine "adb", "push", zipName, "/data/local/tmp/"
        }
    }

    task("flash${variant}", type: Exec) {
        dependsOn("zip${variant}")
        doLast {
            commandLine "adb", "sideload", "${outDir}/${zipName}"
        }
    }
}